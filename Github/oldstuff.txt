template <typename T, int DIMdot, int Iter>
float DOT_exp1(T a[DIMdot],T b[DIMdot])
{

	float factorials[Iter];

	float x = 0;

	factorials[0] = 1;
	// in future have all the factorial pre-saved as collecting them is a waste of resources and clock cycles.
	Factorial:for (int i = 0; i < Iter; i++){
		factorials[i+1] = factorials[i] * (i+1);
		//printf("%f\n",factorials[i]);
	}

	#pragma HLS INLINE

	//new new NEW modified version! 15 clock cycle total improvement!
	// dot product of a A*B matrix
	x = a[0]*b[0] + a[1]*b[1];
	DOT_product:for (int j = 2; j < DIMdot; j = j+2)
		{
		x += a[j]*b[j] + a[j+1]*b[j+1];
		}
	/*
	//printf("Xval:%.11f\n",x);
	//this is the case for 16 iteration where the value goes negative after -5.036565 and e^x effectivly is set to 0 thus 1/(1+0) = 1;
	if (x <= -5.03657){
		return 1;
	}
	*/
	//this is the case for 16 iteration where the value goes negative after -5.036565 and e^x effectivly is set to 0 thus e^-5.036565 = 0;
	if (x <= -5.03657){
		return 1;
	}


		//new new NEW NEWWWW??? modified version! x clock cycle total improvement!
	// this effectivly is e^x
		float sum,inital;
		float pre_exp[Iter];
		float pre2_exp[8];
		float pre3_exp[4];
		float pre4_exp[2];
		int n;

		float power_out[Iter];
		//float power_out1[Iter];
		float pow_2,pow_4,pow_8;
		power_out[0] = 1;
		power_out[1] = x;
		pow_2 = x*x;
		power_out[2] = pow_2;


		//x+2 is 1st is 1 2nd is x so 1+x and 1+1+x is part of 1/(1+e^x)
		//inital = x + 2;
		inital = x + 1;


		power_loop2:for(int j = 2; j< Iter/4; j = j + 2){
			// leapfrog 1 3...
			power_out[j+1] = power_out[j-1]*pow_2;
			// leapfrog 2 4...
			power_out[j+2] = power_out[j]*pow_2;
		}
		pow_4 = power_out[4];
		//each iteration of a power loop
		power_loop:for(int j = 0; j< Iter; j = j + 4){
			// leapfrog 1 5 9 13...
			power_out[j+4] = power_out[j]*pow_4;
			// leapfrog 2 6 10 14...
			power_out[j+5] = power_out[j+1]*pow_4;
			// leapfrog 3 7 11 15...
			power_out[j+6] = power_out[j+2]*pow_4;
			// leapfrog 4 8 12 16...
			power_out[j+7] = power_out[j+3]*pow_4;

			//printf("powerout: %.11f\n",power_out[j+1]);
		}
/*
 //proof of concept of how to expand it further, keep in mind at this point it is worth while having
  * a nested for loop to cut down on the bulk. Of course it would have to be unrolled twice as well.
		pow_8 = power_out[8];
		power_loop8:for(int j = 0; j< Iter; j = j + 8){
			// leapfrog 1 5 9 13...
			power_out[j+8] = power_out[j]*pow_8;
			// leapfrog 2 6 10 14...
			power_out[j+9] = power_out[j+1]*pow_8;
			// leapfrog 3 7 11 15...
			power_out[j+10] = power_out[j+2]*pow_8;
			// leapfrog 4 8 12 16...
			power_out[j+11] = power_out[j+3]*pow_8;
			// leapfrog 1 5 9 13...
			power_out[j+12] = power_out[j+4]*pow_8;
			// leapfrog 2 6 10 14...
			power_out[j+13] = power_out[j+5]*pow_8;
			// leapfrog 3 7 11 15...
			power_out[j+14] = power_out[j+6]*pow_8;
			// leapfrog 4 8 12 16...
			power_out[j+15] = power_out[j+7]*pow_8;

			//printf("powerout: %.11f\n",power_out[j+1]);
		}
*/


		//for(int j = 2; j< Iter; j++){
		//	printf("powerout: %.11f N: %d\n",power_out[j],j);
		//}

		DOT_exp1_label1:for (n = 2; n < Iter; n++){

			pre_exp[n] = power_out[n]/factorials[n];

			//printf("pre:%f with %d\n",pre_exp[n],n);
		}

		pre2_exp[0] = inital;
		//printf("post1:%f\n",pre2_exp[0]);
		//printf("should:%f\n",x + 2);

		ADD1_loop:for(n = 2; n < Iter; n = n + 2){
			pre2_exp[n/2] = pre_exp[n] + pre_exp[n+1];
		}
		sum = 0;
		ADD2_loop:for(int l = 0; l < 8; l = l + 2){
			sum += pre2_exp[l] + pre2_exp[l+1];
		}
		//return 1/sum; would be for 1/(1+e^x)
		//return 1/sum;
		return sum;

}